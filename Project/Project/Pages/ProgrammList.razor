@page "/Programms"
@using Project.Data;
@inject NavigationManager Navigation
<div class="content">
    <div class="filters_block">
        <div class="filters-input">
            <label>По рейтингу</label>
            <input type="button" @onclick="CostFilterUpdate" value="@costBtnFilter" />
            <label>По дате</label>
            <input type="button"  @onclick="DateFilterUpdate" value="@dateBtnFilter"/>
            <input type="checkbox" />
            <label>Только собственные упражнения</label>
            <input class="filter-input-search" type="search" placeholder="Поиск" @onchange="SearchChanged" />
        </div>
    </div>
    <div class="items_list">
        @if (programms != null && programms.Count!=0)
        {
            @foreach (TrainingProgramm tr in programms)
            {
                <ProgrammListComponent isLast="0" id="@tr.Id"></ProgrammListComponent>
            }

        }
        else if(programms.Count==0)
        {
            <div>Ничего не найдено</div>
        }
        
    </div>
</div>
@code {
    private int currentCount = 0;

    private string searchStr;
    private int costFilter = 0;
    private int dateFilter = 0;
    private char costBtnFilter = '⇕';
    private char dateBtnFilter = '⇕';
    private bool isMine = false;
    List<TrainingProgramm>? programms;
    List<QueryParametr> queryParametrs;
    Coach coach;
    protected override void OnInitialized()
    {
        if (UserService.getInstance().CurentUser.Id != 0)
        {
            queryParametrs = new List<QueryParametr>();

            var coaches = DBRequest.Select<Coach>("Coaches", new List<QueryParametr> { new QueryParametr($"[UserId]={UserService.getInstance().CurentUser.Id}", Operator.NONE) });
            if (coaches.Count != 0)
            {
                coach = coaches[0];
                queryParametrs.Add(new QueryParametr($"([CoachId]={coach.Id} or [IsVisible]={1})", Operator.NONE));

            }
            else
            {
                queryParametrs.Add(new QueryParametr($"[IsVisible]={1}", Operator.NONE));
            }
            programms = DBRequest.Select<TrainingProgramm>("TrainingProgramms",queryParametrs);  
        }
        else
            Navigation.NavigateTo("Registration");
    }
    private void search(string orderString)
    {
        programms = DBRequest.Select<TrainingProgramm>("TrainingProgramms", queryParametrs, orderString);

    }
    private void search()
    { 
        programms = DBRequest.Select<TrainingProgramm>("TrainingProgramms", queryParametrs);   
    }
    private async Task SearchChanged(Microsoft.AspNetCore.Components.ChangeEventArgs patharg)
    {
        Coach queryCoach;
        searchStr = (string)patharg.Value;
        string strForQuery = $"[Name]='{searchStr}'";
        if (!string.IsNullOrEmpty(searchStr))
        {
            queryParametrs[0].Operator = Operator.AND;
            var users = DBRequest.Select<User>("Users", new List<QueryParametr> { new QueryParametr($"[Login]='{searchStr}'", Operator.NONE) });
            if (users.Count != 0)
            {
                if (users[0].IsCoach)
                {
                    queryCoach = DBRequest.Select<Coach>("Coaches", new List<QueryParametr> { new QueryParametr($"[UserId]={users[0].Id}", Operator.NONE) })[0];
                    strForQuery = $"([Name]='{searchStr}' or [CoachId]={queryCoach.Id})";
                }

            }
            if (queryParametrs.Count >= 2)
            {
                queryParametrs.Insert(1, new QueryParametr(strForQuery, Operator.AND));
            }
            else
            {
                queryParametrs.Add(new QueryParametr(strForQuery, Operator.NONE));
            }

        } 
        else
        {
            if (queryParametrs.Count != 1)
            {
                queryParametrs.RemoveAt(1);
                if (queryParametrs.Count == 1)
                    queryParametrs[queryParametrs.Count - 1].Operator = Operator.NONE;
                else
                    queryParametrs[0].Operator = Operator.AND;
            }

        }
        search();
    }
    private async Task CostFilterUpdate()
    {
        string orderString = "";
        if (costFilter == 0 && dateFilter == 0)
        {
            costFilter = 1;
            costBtnFilter = '▲';
            orderString = "[Cost]";
        }
        else if ((dateFilter == 1 || dateFilter == 2) && costFilter == 0)
        {
            dateFilter = 0;
            costFilter = 1;
            costBtnFilter = '▲';
            dateBtnFilter = '⇕';
            orderString = "[Cost]";
        }
        else if (costFilter == 2)
        {
            costFilter = 1;
            costBtnFilter = '▲';
            orderString = "[Cost]";
        }
        else
        {
            costFilter = 2;
            costBtnFilter = '▼';
            orderString = "[Cost] desc";
        }
        search(orderString);
        
    }
    private async Task DateFilterUpdate()
    {
        string orderString = "";
        if (costFilter == 0 && dateFilter == 0)
        {
            dateFilter = 1;
            dateBtnFilter = '▲';
            orderString = "[ProgrammDuration]";
        }
        else if ((costFilter == 1 || costFilter == 2) && dateFilter == 0)
        {
            costFilter = 0;
            dateFilter = 1;
            dateBtnFilter = '▲';
            costBtnFilter = '⇕';
            orderString = "[ProgrammDuration]";
        }
        else if (dateFilter == 2)
        {
            dateFilter = 1;
            dateBtnFilter = '▲';
            orderString = "[ProgrammDuration]";
        }
        else
        {
            dateFilter = 2;
            dateBtnFilter = '▼';
            orderString = "[ProgrammDuration] desc";
        }
        search(orderString);
    }
    private async Task IsMineUpdate(Microsoft.AspNetCore.Components.ChangeEventArgs patharg)
    {
        if (isMine)
        {
            isMine = false;
            if (queryParametrs.Count != 1)
            {
                queryParametrs.RemoveAt(queryParametrs.Count - 1);
                queryParametrs[queryParametrs.Count - 1].Operator = Operator.NONE;
            }
        }
        else
        {
            isMine = true;
            queryParametrs[queryParametrs.Count - 1].Operator = Operator.AND;
            if (coach != null)
            {
                queryParametrs.Add(new QueryParametr($"[CoachId]={coach.Id}", Operator.NONE));
            }
            else
            {
                queryParametrs.Add(new QueryParametr($"[CoachId]={0}", Operator.NONE));
            }
        }

        search();
    }


    private void exerciseClick(TrainingProgramm e)
    {
        Navigation.NavigateTo($"RedactProgramm/{e.Id}");
    }
}
